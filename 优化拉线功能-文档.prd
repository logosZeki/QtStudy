# 流程图编辑器拉线功能优化需求说明文档

## 1. 文档信息

| 项目 | 内容 |
|------|------|
| 文档标题 | 流程图编辑器拉线功能优化需求说明 |
| 版本号 | 1.0 |
| 创建日期 | 2023-10-20 |
| 状态 | 初稿 |

## 2. 需求概述

本文档描述了流程图编辑器中拉线功能的优化需求，主要包括工具栏拖拽图形时的交互优化、增加带箭头直线图形以及拉线功能的增强。

## 3. 功能需求

### 3.1 工具栏拖拽图形交互优化

#### 3.1.1 当前问题
目前从工具栏拖拽图形时，会显示一个灰色矩形背景，背景上是要创建的图形，影响用户体验和视觉效果。

#### 3.1.2 优化方案
- 移除拖拽过程中的灰色矩形背景
- 仅显示要创建的图形，使其背景透明
- 保持拖拽过程中的其他交互行为不变

### 3.2 带箭头直线图形

#### 3.2.1 功能描述
在工具栏中增加一个新的图形类型 - 带箭头的直线，实现可以独立存在的连接线。

#### 3.2.2 实现要求
- 基于现有的Connection类实现
- 箭头可以不依赖Shape而单独存在
- 在工具栏中显示带箭头的直线图标
- 用户可以通过拖拽方式创建带箭头的直线

#### 3.2.3 选中功能
- 实现可以选中直线的功能
- 选中后直线的两端显示蓝色渐变的轮廓，提供视觉反馈
- 选中状态下可以进行移动和调整端点位置

### 3.3 拉线功能增强

#### 3.3.1 空白区域拉线
- 增加从一个图形拉线到空白区域的功能
- 当终点不在任何图形附近时，也能成功创建连接线
- 保持与现有从图形到图形拉线的一致用户体验

#### 3.3.2 端点拖动功能
- 允许用户通过点击直线的两个端点附近区域拖动端点
- 拖动端点可以重新连接到其他图形，或连接到空白区域
- 判定端点附近区域的范围应在 `m_hoveredShape->hitConnectionPoint(event->pos(),true)` 范围外，同时不要离端点太远
- 端点拖动功能应适用于所有连接线，无论该端点是否已经连接上图形

## 4. 交互设计

### 4.1 拖拽图形时的交互
1. 用户从工具栏拖拽图形时，仅显示要创建的图形，无背景
2. 拖拽过程中图形应与鼠标位置保持一致
3. 释放鼠标时图形创建在释放位置

### 4.2 带箭头直线的交互
1. 用户从工具栏拖拽带箭头直线到画布
2. 拖拽结束时创建一条带箭头的直线
3. 用户可以通过点击选中直线
4. 选中状态下可以拖动直线或调整端点位置

### 4.3 端点拖动的交互
1. 用户鼠标移动到连接线端点附近时，显示适当的光标提示
2. 用户点击并拖动端点可以重新定位连接线端点
3. 端点可以连接到其他图形的连接点，或停留在空白区域

## 5. 设计原则

实现应尽量符合SOLID原则：
- 单一职责原则（S）：每个类应该只有一个改变的理由
- 开放/封闭原则（O）：软件实体应该对扩展开放，对修改关闭
- 里氏替换原则（L）：子类应该能够替换其父类并出现在父类能够出现的任何地方
- 接口隔离原则（I）：不应强制客户端依赖于它们不使用的方法
- 依赖倒置原则（D）：高级模块不应依赖于低级模块，两者都应依赖于抽象

## 6. 技术实现建议

### 6.1 工具栏拖拽优化
- 修改 `ShapeItem::mousePressEvent` 方法，设置拖拽图像背景为透明

### 6.2 带箭头直线图形
- 创建一个新的 `ArrowLine` 类，继承自 `Connection` 类
- 在 `ShapeTypes` 命名空间中添加新的类型常量
- 在工具栏中添加相应的图标和项目

### 6.3 拉线功能增强
- 修改 `DrawingArea::mousePressEvent` 和 `DrawingArea::mouseReleaseEvent` 方法，增加对空白区域拉线的支持
- 在 `DrawingArea::mouseMoveEvent` 中增加对连接线端点拖动的检测和处理
- 添加选中连接线的视觉效果

## 7. 测试要点

1. 拖拽图形时应仅显示透明背景的图形
2. 带箭头直线能否正常创建和选中
3. 从图形到空白区域的拉线是否正常工作
4. 端点拖动功能是否符合需求
5. 所有交互是否流畅且符合用户预期
